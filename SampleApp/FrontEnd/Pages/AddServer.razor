@page "/servers/add"

@inject ILogger<Server> Logger
@inject NavigationManager NavigationManager

<PageTitle>Add Servers</PageTitle>

@* If you add @Model on model they data do a two-way data binding *@
<EditForm Model="server" OnValidSubmit="Submit" FormName="formServer" OnInvalidSubmit="InvalidSubmit">
    <DataAnnotationsValidator />
    <InputNumber @bind-Value="server.Id" hidden /> <!-- Hidden field to send the Id to the server -->

    <div class="form-group row mb-3">
        <label for="name" class="col-2 col-form-label">Name</label>
        <div class="col-6">
            <InputText class="form-control" @bind-Value="server.Name" />
        </div>
        <div class="col-4">
            <ValidationMessage For="@(() => server.Name)">
                <div class="alert alert-danger" role="alert">This is an error</div>
            </ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="city" class="col-2 col-form-label">City</label>
        <div class="col-6">
            <InputText class="form-control" @bind-Value="server.City" />
        </div>
        <div class="col-4">
            <ValidationMessage For="@(() => server.City)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="isOnline" class="col-2 col-form-label">Is Online</label>
        <div class="col-6">
            <InputCheckbox class="form-check-input" @bind-Value="server.IsOnline" />
        </div>
        <div class="col-4">
            <ValidationMessage For="@(() => server.IsOnline)">
                <div class="alert alert-danger" role="alert">This is an error</div>
            </ValidationMessage>
        </div>
    </div>

    <button type="submit">Save</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button type="button" class="btn btn-warning" @onclick="ResetForm">Reset</button>
</EditForm>

@code {
    [SupplyParameterFromForm]// To receive data from the form when submitting
    private Server server { get; set; } = new() { IsOnline = false };

    private void Submit()
    {
        Logger.LogInformation("Form submitted!");
        Logger.LogInformation($"Name: {server?.Name}");
        Logger.LogInformation($"City: {server?.City}");
        Logger.LogInformation($"Is Online: {server?.IsOnline}");
        if (server != null)
        {
            ServersRepository.AddServer(server);
        }
        NavigationManager.NavigateTo("/servers");
    }

    // Extras methods for FormEdit
    private void ResetForm()
    {
        server = new();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/servers");
    }

    private void InvalidSubmit()
    {
        Logger.LogWarning("Invalid form submitted!");
    }
}
