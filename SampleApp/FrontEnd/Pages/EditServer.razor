@page "/servers/edit/{Id:int}"
@inject ILogger<Server> Logger
@inject NavigationManager NavigationManager
@* List with all components of form:
https://learn.microsoft.com/pt-br/dotnet/api/microsoft.aspnetcore.components.forms?view=aspnetcore-8.0 *@
<PageTitle>Edit Servers</PageTitle>

<h1>Server - @Id</h1>
<br />
<p>@Model!.Name - @Model!.City is @(Model!.IsOnline ? "Online" : "Offline")</p>

@* If you add @Model on model they data do a two-way data binding *@
<EditForm Model="Model" OnValidSubmit="Submit" FormName="formServer" OnInvalidSubmit="InvalidSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <InputNumber @bind-Value="Model!.Id" hidden /> <!-- Hidden field to send the Id to the server -->

    <div class="form-group row mb-3">
        <label for="name" class="col-2 col-form-label">Name</label>
        <div class="col-6">
            <InputText class="form-control" @bind-Value="Model!.Name" />
        </div>
        <div class="col-4">
            <ValidationMessage For="@(() => Model!.Name)">
                <div class="alert alert-danger" role="alert">This is an error</div>
            </ValidationMessage>
        </div>
    </div>
    <div class="form-group row">
        <label for="city" class="col-2 col-form-label">City</label>
        <div class="col-6">
            <InputText class="form-control" @bind-Value="Model!.City" />
        </div>
        <div class="col-4">
            <ValidationMessage For="@(() => Model!.City)" />
        </div>
    </div>
    <div class="form-group row">
        <label for="isOnline" class="col-2 col-form-label">Is Online</label>
        <div class="col-6">
            <InputCheckbox class="form-check-input" @bind-Value="Model!.IsOnline" />
        </div>
        <div class="col-4">
            <ValidationMessage For="@(() => Model!.IsOnline)">
                <div class="alert alert-danger" role="alert">This is an error</div>
            </ValidationMessage>
        </div>
    </div>

    <button type="submit">Save</button>
    <button type="button" class="btn btn-danger" @onclick="Delete">Delete</button>
    <button type="button" class="btn btn-secondary" @onclick="Cancel">Cancel</button>
    <button type="button" class="btn btn-warning" @onclick="ResetForm">Reset</button>
</EditForm>

@code {
    [Parameter]
    public int Id { get; set; }
    
    [SupplyParameterFromForm(FormName = "formServer")] 
    /*
    This attribute is used to supply the parameter from the form, in this case, the form name is formServer because we set it in the EditForm.
    But is optional because we have only one form in this page, this is used when we have more than one form in the same page.
    */
    public Server? Model { get; set; }
    protected override void OnInitialized() => Model ??= new();


    protected override void OnParametersSet()
    {
        Console.WriteLine($"Server Id: {Id}");
        Model = ServersRepository.GetServerById(Id);
    }

    private void Submit()
    {
        Logger.LogInformation("Form submitted!");
        Logger.LogInformation($"Name: {Model?.Name}");
        Logger.LogInformation($"City: {Model?.City}");
        Logger.LogInformation($"Is Online: {Model?.IsOnline}");
        if (Model != null)
        {
            ServersRepository.UpdateServer(Id, Model);
        }
        NavigationManager.NavigateTo("/servers");
    }

    // Extras methods for FormEdit
    private void ResetForm()
    {
        Model = new();
    }

    private void Cancel()
    {
        NavigationManager.NavigateTo("/servers");
    }

    private void Delete()
    {
        ServersRepository.DeleteServer(Id);
        NavigationManager.NavigateTo("/servers");
    }

    private void InvalidSubmit()
    {
        Logger.LogWarning("Invalid form submitted!");
    }
}
