@inject NavigationManager NavigationManager
<h1>Servers Component!</h1>

<p>@status at @DateTime.Now</p>

<!-- Display current server status -->
<p style="color: @(server.IsOnline ? "green" : "red")">@server.Name - @server.City</p>

<!-- Button grid to change server's city -->
<div class="container-fluid text-center">
    <div class="row w-50">
        @foreach (var city in cities)
        {
            <div class="col">
                <div class="card @(selectedCity.Equals(city, StringComparison.OrdinalIgnoreCase) ? "border border-4 warning" : "")">
                    <img src="@($"/images/{city}.png")" class="card-img-top" alt="Server Image">
                    <div class="card-body">
                        <h5 class="card-title">@server.Name</h5>
                        <h6 class="card-subtitle mb-2 text-muted">@server.City</h6>
                        <p class="card-text" style="color: @(server.IsOnline ? "green" : "red")">@server.Name -
                            @(server.IsOnline ? "Online" : "Offline")</p>
                        @* <button class="btn btn-primary" @onclick="() => ChangeCity(city)">@city</button> *@
                        <button class="btn btn-primary" @onclick="() => SelectCity(city)">@city</button>
                    </div>
                </div>
            </div>
        }
    </div>
</div>

@selectedCity

<br/>
Handle server filter change: @serverFilter
<div class="input-grou mb-3">
    <input type="text" class="form-control" placeholder="Search servers" @onchange="HandleServerFilterChange">
    <button class="btn btn-primary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>
One way data binding: @serverFilter
<div class="input-grou mb-3">
    <input type="text" class="form-control" placeholder="Search servers" @bind-value="serverFilter">
    <button class="btn btn-primary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

Two way data binding: @serverFilterTwoWay
<div class="input-grou mb-3">
    <input type="text" class="form-control" placeholder="Search servers" 
    @bind-value="serverFilterTwoWay"
    @bind-value:event="oninput"
    />
    <button class="btn btn-primary" type="button" id="button-search" @onclick="HandleSearch">Search</button>
</div>

<h3>Servers List</h3>
Go to add server page: <a href="/servers/add" class="btn btn-primary">Add Server</a>
<ul>
    @if (servers == null)
    {
        <li>Loading...</li>
    }
    else if (servers.Count == 0)
    {
        <li>No servers found</li>
    }
    else
    {
        <Virtualize Items="this.servers" Context="server">
            <li @key="server.Id">
                @server.Name - @server.City is @(server.IsOnline ? "Online" : "Offline")
                <a href="@($"/servers/edit/{server.Id}")" class="btn btn-lin">Edit</a>
                <EditForm Model="server" FormName="@($"form-server-{server.Id}")" OnValidSubmit="@(() => { DeleteServer(server.Id); })">
                    <button type="submit" class="btn btn-danger">Delete</button>
                </EditForm>
            </li>
        </Virtualize>
        
    }
</ul>
Add server to list:
<button class="btn btn-primary" @onclick="@(() => {
    this.servers.Insert(0, new Server
    {
        Id = (this.servers.Count + 1) + 1,
        Name = "New Server",
        City = "New City"
    });
})">Add Server</button>

@code {
    private List<Server>? servers = ServersRepository.GetServers();
    private List<string> cities = CitiesRepository.GetCities();
    private string selectedCity = string.Empty;
    private string serverFilter = string.Empty;

    private string _serverFilterTwoWay = string.Empty;
    private string serverFilterTwoWay
    {
        get => _serverFilterTwoWay;
        set
        {
            _serverFilterTwoWay = value;
            this.servers = ServersRepository.SearchServers(_serverFilterTwoWay);
            this.selectedCity = string.Empty;
        }
    }

    private string status = "Server is offline";
    private Server server = new Server
        {
            Name = "Test Server",
            City = "Toronto"
        };

    // Method to change the server's city
    private void ChangeCity(string newCity)
    {
        this.selectedCity = newCity;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);
        // Optionally, you can perform any additional logic here, like updating the server status
        // Example: server.IsOnline = SomeLogicToUpdateOnlineStatus();

        // Notify Blazor that state has changed and it should re-render
        StateHasChanged();
    }

    // delete a server
    private void DeleteServer(int id)
    {
        // Delete server logic
        ServersRepository.DeleteServer(id);
        // Refresh the servers list
        NavigationManager.NavigateTo("/servers");
        
    }

    private void HandleServerFilterChange(ChangeEventArgs e)
    {
        // update when the user types in the search box and focus is lost
        this.serverFilter = e.Value.ToString() ?? string.Empty;
        this.servers = ServersRepository.SearchServers(this.serverFilter);
        this.selectedCity = string.Empty;
    }

    private void HandleSearch()
    {
        // update when the user clicks the search button
        this.servers = ServersRepository.SearchServers(this.serverFilter);
        this.selectedCity = string.Empty;
    }

    private void SelectCity(string city)
    {
        this.selectedCity = city;
        this.servers = ServersRepository.GetServersByCity(this.selectedCity);
        if (city.Equals("Halifax", StringComparison.OrdinalIgnoreCase))
        {
            for (int i = 0; i < 2000; i++)
            {
                this.servers.Add(new Server
                {
                    Id = (this.servers.Count + 1) + 100,
                    Name = $"Server {i + 1}",
                    City = "Halifax",
                    IsOnline = true
                });
            }
        }
    }
}
